/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Data {
  export type ContentStruct = {
    title: string;
    url: string;
    submittedBy: AddressLike;
    likes: BigNumberish;
    tagIds: BigNumberish[];
  };

  export type ContentStructOutput = [
    title: string,
    url: string,
    submittedBy: string,
    likes: bigint,
    tagIds: bigint[]
  ] & {
    title: string;
    url: string;
    submittedBy: string;
    likes: bigint;
    tagIds: bigint[];
  };

  export type TagStruct = {
    name: string;
    createdBy: AddressLike;
    contentIds: BigNumberish[];
  };

  export type TagStructOutput = [
    name: string,
    createdBy: string,
    contentIds: bigint[]
  ] & { name: string; createdBy: string; contentIds: bigint[] };

  export type UserStruct = {
    userAddress: AddressLike;
    numberOfLikedContent: BigNumberish;
    submittedContent: BigNumberish[];
  };

  export type UserStructOutput = [
    userAddress: string,
    numberOfLikedContent: bigint,
    submittedContent: bigint[]
  ] & {
    userAddress: string;
    numberOfLikedContent: bigint;
    submittedContent: bigint[];
  };

  export type TagToAddStruct = {
    name: string;
    createdBy: AddressLike;
    contentIds: string[];
  };

  export type TagToAddStructOutput = [
    name: string,
    createdBy: string,
    contentIds: string[]
  ] & { name: string; createdBy: string; contentIds: string[] };

  export type ContentToAddStruct = {
    title: string;
    url: string;
    submittedBy: AddressLike;
    likes: BigNumberish;
    tagIds: string[];
  };

  export type ContentToAddStructOutput = [
    title: string,
    url: string,
    submittedBy: string,
    likes: bigint,
    tagIds: string[]
  ] & {
    title: string;
    url: string;
    submittedBy: string;
    likes: bigint;
    tagIds: string[];
  };
}

export interface CreateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createContentIfNotExists"
      | "createTagIfNotExists"
      | "createUserIfNotExists"
      | "getAllContent"
      | "getAllTags"
      | "getAllUsers"
      | "getContent"
      | "getContentByTag"
      | "getTag"
      | "getUser"
      | "getUserLikedContent"
      | "getUserSubmittedContent"
      | "owner"
      | "renounceOwnership"
      | "syncState"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "createContentIfNotExists",
    values: [string, string, AddressLike, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createTagIfNotExists",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createUserIfNotExists",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTags",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getContent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getContentByTag",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTag", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLikedContent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubmittedContent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "syncState",
    values: [
      Data.UserStruct[],
      Data.TagToAddStruct[],
      Data.ContentToAddStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createContentIfNotExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTagIfNotExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUserIfNotExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAllTags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContentByTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserLikedContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubmittedContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "syncState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Create extends BaseContract {
  connect(runner?: ContractRunner | null): Create;
  waitForDeployment(): Promise<this>;

  interface: CreateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createContentIfNotExists: TypedContractMethod<
    [
      title: string,
      url: string,
      submittedBy: AddressLike,
      likes: BigNumberish,
      _tags: string[]
    ],
    [bigint],
    "nonpayable"
  >;

  createTagIfNotExists: TypedContractMethod<
    [name: string, submittedBy: AddressLike],
    [bigint],
    "nonpayable"
  >;

  createUserIfNotExists: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getAllContent: TypedContractMethod<[], [Data.ContentStructOutput[]], "view">;

  getAllTags: TypedContractMethod<[], [Data.TagStructOutput[]], "view">;

  getAllUsers: TypedContractMethod<[], [Data.UserStructOutput[]], "view">;

  getContent: TypedContractMethod<
    [url: string],
    [Data.ContentStructOutput],
    "view"
  >;

  getContentByTag: TypedContractMethod<
    [name: string],
    [Data.ContentStructOutput[]],
    "view"
  >;

  getTag: TypedContractMethod<[name: string], [Data.TagStructOutput], "view">;

  getUser: TypedContractMethod<
    [userAddress: AddressLike],
    [Data.UserStructOutput],
    "view"
  >;

  getUserLikedContent: TypedContractMethod<
    [userAddress: AddressLike],
    [Data.ContentStructOutput[]],
    "view"
  >;

  getUserSubmittedContent: TypedContractMethod<
    [userAddress: AddressLike],
    [Data.ContentStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  syncState: TypedContractMethod<
    [
      usersToAdd: Data.UserStruct[],
      tagsToAdd: Data.TagToAddStruct[],
      contentsToAdd: Data.ContentToAddStruct[]
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createContentIfNotExists"
  ): TypedContractMethod<
    [
      title: string,
      url: string,
      submittedBy: AddressLike,
      likes: BigNumberish,
      _tags: string[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTagIfNotExists"
  ): TypedContractMethod<
    [name: string, submittedBy: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createUserIfNotExists"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllContent"
  ): TypedContractMethod<[], [Data.ContentStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllTags"
  ): TypedContractMethod<[], [Data.TagStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllUsers"
  ): TypedContractMethod<[], [Data.UserStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getContent"
  ): TypedContractMethod<[url: string], [Data.ContentStructOutput], "view">;
  getFunction(
    nameOrSignature: "getContentByTag"
  ): TypedContractMethod<[name: string], [Data.ContentStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTag"
  ): TypedContractMethod<[name: string], [Data.TagStructOutput], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [Data.UserStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserLikedContent"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [Data.ContentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserSubmittedContent"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [Data.ContentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "syncState"
  ): TypedContractMethod<
    [
      usersToAdd: Data.UserStruct[],
      tagsToAdd: Data.TagToAddStruct[],
      contentsToAdd: Data.ContentToAddStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
